{"version":3,"sources":["Scoreboard/Tally.js","Scoreboard/ScoreboardTable.js","App.js","serviceWorker.js","index.js"],"names":["Tallys","state","hits","tally","updateHits","y","_this","props","updateScore","num","setState","x","display","react_default","a","createElement","className","onClick","this","Component","PlayerName","name","showForm","score","scoreTotal","playerName","event","target","value","preventReroute","preventDefault","hideForm","e","tableHead","onChange","type","placeholder","playerOne","Tally","App","ScoreboardTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1acf46ee.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Tallys extends Component{\n  state = {\n    hits: 0,\n    tally: ''\n  }\n\n\n\n  updateHits = () => {\n    let x = 0;\n    let y = '';\n    x += 1;\n    if(this.state.hits === 0){\n      y = '/';\n    }\n    else if(this.state.hits === 1){\n      y = \"X\";\n    }\n    else if(this.state.hits === 2){\n      y = \"(X)\"\n    }\n    else{\n      y = \"(X)\"\n      this.props.updateScore(this.props.num);\n    }\n    this.setState({\n      hits: this.state.hits + x,\n      tally: y\n    })\n    \n\n  }\n  display = () => {\n    return(\n      <div>\n        <div className=\"inlineTally\">\n          <div className=\"half\">\n          <button className=\"moveDown\" onClick={this.updateHits}>{this.props.num}</button>\n          </div>\n          <div className=\"half\">\n          <div>{this.state.tally}</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n    \n  render(){\n    return(\n      <div>\n        {this.display()}\n      </div>\n    )\n  }\n  }\n\nexport default Tallys;","import React, { Component } from 'react';\nimport Tallys from './Tally';\n\n\n\nclass PlayerName extends Component {\n\n  state = {\n    name: \"\",\n    showForm: true,\n    score: 0\n  }\n  scoreTotal = (num) => {\n    this.setState({\n      score: this.state.score + num\n    })\n  }\n  playerName = (event) =>{\n    this.setState({\n      name: event.target.value\n    })\n  }\n  preventReroute = (event) => {\n    event.preventDefault();\n  }\n  hideForm = (e) => {\n    this.preventReroute(e);\n    this.setState({\n      showForm: false\n    })\n  }  \n  tableHead = () => {\n    return(\n      this.state.showForm ? \n\n      <div>\n        <div className='inputHlder'>\n        <form>\n          <input onChange={ this.playerName } type=\"text\" placeholder=\"Input Name\"/>\n          <button type=\"submit\" onClick={  this.hideForm }>Submit</button>\n        </form>\n        </div>\n        \n      </div>\n      :\n      <div>\n         <div className='nameAndScore'>\n        <h2>{ this.state.name }</h2>\n        <div className=\"inlinePoints\">\n          <p>Score:</p>\n          <div>{this.state.score}</div>\n        </div>\n        </div>\n      </div>\n    );\n    \n  }\n\n  playerOne = () => {\n    return(\n    <div className=\"tallyHolder\">\n    <Tallys updateScore={this.scoreTotal} num={15}/>\n    <Tallys updateScore={this.scoreTotal} num={16}/>\n    <Tallys updateScore={this.scoreTotal} num={17}/>\n    <Tallys updateScore={this.scoreTotal} num={18}/>\n    <Tallys updateScore={this.scoreTotal} num={19}/>\n    <Tallys updateScore={this.scoreTotal} num={20}/>\n    <Tallys updateScore={this.scoreTotal} num={25}/>\n    </div>\n    )\n  }\n  \n  render(){\n    \n  return(\n  <div className=\"plyrTbl\">\n    { this.tableHead() }\n    { this.playerOne() }\n  </div>\n      )\n    }\n  }\n\nexport default PlayerName;","import React, { Component } from 'react';\nimport './App.css';\nimport Scoreboard from './Scoreboard/ScoreboardTable';\nimport PlayerName from './Scoreboard/ScoreboardTable';\n// import Form from './Scoreboard/Form';\n\nclass App extends Component {\n  \n\n\n\n  render() {\n    return (\n      <div className=\"holdAll\">\n        <PlayerName />\n        <h1>ðŸŽ¯</h1>\n        <PlayerName />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}